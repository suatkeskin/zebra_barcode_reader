// Copyright (c) 2024, Suat Keskin. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v21.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.zebra.plugins.barcode;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InitParams {
    private @NonNull Boolean autoConnect;

    public @NonNull Boolean getAutoConnect() {
      return autoConnect;
    }

    public void setAutoConnect(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"autoConnect\" is null.");
      }
      this.autoConnect = setterArg;
    }

    private @NonNull Long readingMode;

    public @NonNull Long getReadingMode() {
      return readingMode;
    }

    public void setReadingMode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"readingMode\" is null.");
      }
      this.readingMode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    InitParams() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      InitParams that = (InitParams) o;
      return autoConnect.equals(that.autoConnect) && readingMode.equals(that.readingMode);
    }

    @Override
    public int hashCode() {
      return Objects.hash(autoConnect, readingMode);
    }

    public static final class Builder {

      private @Nullable Boolean autoConnect;

      @CanIgnoreReturnValue
      public @NonNull Builder setAutoConnect(@NonNull Boolean setterArg) {
        this.autoConnect = setterArg;
        return this;
      }

      private @Nullable Long readingMode;

      @CanIgnoreReturnValue
      public @NonNull Builder setReadingMode(@NonNull Long setterArg) {
        this.readingMode = setterArg;
        return this;
      }

      public @NonNull InitParams build() {
        InitParams pigeonReturn = new InitParams();
        pigeonReturn.setAutoConnect(autoConnect);
        pigeonReturn.setReadingMode(readingMode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(autoConnect);
      toListResult.add(readingMode);
      return toListResult;
    }

    static @NonNull InitParams fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      InitParams pigeonResult = new InitParams();
      Object autoConnect = pigeonVar_list.get(0);
      pigeonResult.setAutoConnect((Boolean) autoConnect);
      Object readingMode = pigeonVar_list.get(1);
      pigeonResult.setReadingMode((readingMode == null) ? null : ((readingMode instanceof Integer) ? (Integer) readingMode : (Long) readingMode));
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return InitParams.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof InitParams) {
        stream.write(129);
        writeValue(stream, ((InitParams) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ZebraBarcodeReaderApi {

    void init(@NonNull InitParams params);

    void connect(@NonNull Long readingMode);

    void disconnect();

    void setReadingMode(@NonNull Long readingMode);

    /** The codec used by ZebraBarcodeReaderApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `ZebraBarcodeReaderApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable ZebraBarcodeReaderApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable ZebraBarcodeReaderApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.zebra_barcode_reader_android.ZebraBarcodeReaderApi.init" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                InitParams paramsArg = (InitParams) args.get(0);
                try {
                  api.init(paramsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.zebra_barcode_reader_android.ZebraBarcodeReaderApi.connect" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number readingModeArg = (Number) args.get(0);
                try {
                  api.connect((readingModeArg == null) ? null : readingModeArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.zebra_barcode_reader_android.ZebraBarcodeReaderApi.disconnect" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.disconnect();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.zebra_barcode_reader_android.ZebraBarcodeReaderApi.setReadingMode" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number readingModeArg = (Number) args.get(0);
                try {
                  api.setReadingMode((readingModeArg == null) ? null : readingModeArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
